@model NaviSafe.Models.ObstacleData

@{
    ViewData["Title"] = "Obstacle Registration Form";
}

<head></head>
<section class="mx-auto max-w-2xl">
    
    

    <div class="bg-white rounded-2xl shadow-sm ring-1 ring-gray-200 p-6">
        <header class="mb-6">
            <h1 class="text-2xl font-semibold">Obstacle Registration Form</h1>
            <p class="text-gray-600 mt-1">Please register an obstacle:</p>
        </header>
        
        <form asp-action="DataForm" method="post" class="space-y-5">
            <div class="grid gap-5 sm:grid-cols-2">
                
                <div class="sm:col-span-2">
                    <label asp-for="ObstacleName" class="block text-sm font-medium text-gray-800 mb-1">
                        Obstacle Name:
                    </label>
                    <input asp-for="ObstacleName"
                           class="block w-full rounded-lg border-gray-300 focus:border-indigo-600 focus:ring-indigo-600 px-3 py-2"
                           placeholder="e.g., Wall, Ramp" />
                    <span asp-validation-for="ObstacleName" class="text-sm text-red-600"></span>
                </div>

                <div>
                    <label asp-for="ObstacleHeight" class="block text-sm font-medium text-gray-800 mb-1">
                        Obstacle Height (meters):
                    </label>
                    <input asp-for="ObstacleHeight" type="number" step="0.01" min="0"
                           class="block w-full rounded-lg border-gray-300 focus:border-indigo-600 focus:ring-indigo-600 px-3 py-2"
                           placeholder="e.g., 2.5" />
                    <span asp-validation-for="ObstacleHeight" class="text-sm text-red-600"></span>
                </div>
                
                <div>
                    <label asp-for="ObstacleDescription" class="block text-sm font-medium text-gray-800 mb-1">
                        Description:
                    </label>
                    <textarea asp-for="ObstacleDescription" rows="4"
                        class="block w-full rounded-lg border-gray-300 focus:border-indigo-600 focus:ring-indigo-600 px-3 py-2"
                        placeholder="Describe the obstacle, materials, location, etc."></textarea>
                    <span asp-validation-for="ObstacleDescription" class="text-sm text-red-600"></span>
                </div>
            </div>
            
            <div class="space-y-3">
                <div class="flex items-center justify-between">
                    <label class="block text-sm font-medium text-gray-800 mb-2">
                        How do you want to register the obstacle:
                    </label>
                    <div>
                        <input type="radio" id="liveOption" name="dataSource" value="live" checked>
                        <label for="liveOption">Live data</label>
                        <input type="radio" id="markerOption" name="dataSource" value="marker" class="ml-4">
                        <label for="markerOption">Marker data</label>
                    </div>
                </div>
                <div id="map" style="height: 420px; border-radius: 0.75rem; overflow: hidden; border: 1px solid #e5e7eb;"></div>
                <input type="hidden" asp-for="GeometryGeoJson" id="GeometryGeoJson"/>
                
                <div>
                    <label for="MarkerCoordinatesJSON" class="block text-sm font-medium text-gray-800 mb-1">Coordinates Preview</label>
                    <textarea id="MarkerCoordinatesJSON" class="block w-full rounded-lg border-gray-300 px-3 py-2 text-sm" rows="3" readonly placeholder="Draw on the map to see coordinates here..."></textarea>
                    <label for="LiveCoordinates" class="block text-sm font-medium text-gray-800 mb-1">Live coordinates</label>
                    <textarea id="LiveCoordinates" class="block w-full rounded-lg border-gray-300 px-3 py-2 text-sm" rows="4" readonly placeholder="Your live coordinates will appear here..."></textarea>
                </div>
            </div>
            
            <div class="pt-2">
                <button type="submit"
                        class="inline-flex items-center justify-center rounded-lg bg-indigo-600 px-4 py-2 text-white hover:bg-indigo-700 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                    Submit Data
                </button>
            </div>
            
        </form>
    </div>
</section>

@section Scripts{
<partial name="_ValidationScriptsPartial"/>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/leaflet@1.9.4/dist/leaflet.css"
          crossorigin=""/>
    <link rel="stylesheet" href="https://unpkg.com/leaflet-draw@1.0.4/dist/leaflet.draw.css" />

    <script src="https://cdn.jsdelivr.net/npm/leaflet@1.9.4/dist/leaflet.js"
            crossorigin=""></script>
    <script src="https://unpkg.com/leaflet-draw@1.0.4/dist/leaflet.draw.js"></script> 
    
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/leaflet.locatecontrol@0.85.0/dist/L.Control.Locate.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/leaflet.locatecontrol@0.85.0/dist/L.Control.Locate.min.js" charset="utf-8"></script>
    
    <!--<link rel="stylesheet" href="../lib/leaflet-locatecontrol-0.85.0/dist/L.Control.Locate.mapbox.min.css"/>
    <script src="../lib/leaflet-locatecontrol-0.85.0/dist/L.Control.Locate.min.js"></script>-->

    <script>
        

        let map = L.map('map').setView([58.163137,8.002106], 13);
    
        let osm = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        });
        osm.addTo(map);

        //map.locate({setView: true, maxZoom: 16, enableHighAccuracy: true, watch: true});


    
        let lc = L.control 
            .locate({
                position: 'topright', flyTo: true, setView: 'always',
                locateOptions: {
                        maxZoom: 16,
                        enableHighAccuracy: true,
                        watch: true
                    }
                }).addTo(map);
        
        lc.getContainer().id = "locate-button"; // Assign an ID to the locate button for easier reference

        lc.start(); // Start locating immediately


            map.on('locationfound', function(e) {
                drawnItems.clearLayers(); // Clear previous drawings when location is found
                let lat = e.latlng.lat;
                let lng = e.latlng.lng;
                let radius = e.accuracy; // Accuracy in meters
                let altitude = e.latlng.alt; // Altitude in meters (if available)
                let liveCoordinatesJSON = {}; // Initialize an empty object
                let LiveCoordinatesJSON = {
                    "type": "Feature",
                    "geometry": {
                        "type": "Point",
                        "coordinates": [lng, lat] // GeoJSON format uses [longitude, latitude]
                    },
                    "properties": {
                        "accuracy": radius,
                        "altitude": altitude
                    }
                };
                let liveCoordinatesJSONString = JSON.stringify(LiveCoordinatesJSON);
                let liveCoordinates = "Lat: " + lat + "\nLng: " + lng + "\nAccuracy: " + radius + "m" + "\nJSON: " + liveCoordinatesJSONString;
                console.log("User's location: Lat: " + lat + ", Lng: " + lng + ", Accuracy: " + radius + "m" + ", Altitude: " + altitude);
                document.getElementById("LiveCoordinates").value = liveCoordinates;
                
                
                document.getElementById("MarkerCoordinatesJSON").value = liveCoordinatesJSON;
                });

    
         // Initialize the feature group that will hold the drawn shapes
         let drawnItems = new L.FeatureGroup();
         map.addLayer(drawnItems);

         // Creates the drawing control on the left hand side
         // The drawing control enables drawing of markers, polygons, and polylines
         let drawControl = new L.Control.Draw({
             draw: {
                 polygon: false,
                 polyline: true,
                 marker: true,
                 circle: false,  // Disable circle drawing
                 rectangle: true
             },
             edit: {
                 featureGroup: drawnItems
             }
         });

         map.addControl(drawControl);

        // Event handling when a layer is drawn on the map
         map.on(L.Draw.Event.CREATED, function (e) {
             drawnItems.clearLayers(); // Clear previous drawings
             let layer = e.layer;
             lc.stop(); // Stop locating when user draws

             drawnItems.addLayer(layer);

             // Get the GeoJSON representation of the drawn layer
             let geoJsonData = layer.toGeoJSON();
             let geoJsonString = JSON.stringify(geoJsonData);

             // Set the GeoJSON string into the hidden input field in the form
             document.getElementById('GeometryGeoJson').value = geoJsonString;
             document.getElementById('MarkerCoordinatesJSON').value = geoJsonString;
         });

        //Keeps track of what option is picked
         let useLiveData = true;
         
        //If the user picks "Live data"
        document.getElementById('liveOption').addEventListener('change', function () {
            useLiveData = true;
            lc.start();
            drawnItems.clearLayers();
            document.getElementById('GeometryGeoJson').value = "";
            document.getElementById('MarkerCoordinatesJSON').value = "";
        });
        
        //If the user picks "Marker data"
        document.getElementById('markerOption').addEventListener('change', function () {
            useLiveData = false;
            lc.stop();
            document.getElementById("LiveCoordinates").value = "";
        });
         

 </script>
}

